name: deploy-container-webapp

on:
  workflow_call:
    inputs:
      filepath:
        required: true
        type: string
      imagename:
        required: true
        type: string
      acrname:
        required: true
        type: string
      webappname:
        required: true
        type: string
      slotname:
        required: true
        type: string
    secrets:
      azurecreds:
        required: true
      acrusername:
        required: true
      acrpassword:
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.slotname }}
    env:
      ACRNAME: ${{ inputs.acrname }}
      IMAGE_NAME: "${{ inputs.imagename }}"

    steps:

    - uses: actions/checkout@v2

    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.azurecreds }}

    - uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "openhack4ue1whv5kv"
        secrets: 'SQLDBNAME, SQLPASSWORD, SQLSERVER, SQLUSER'
      id: getSecretAction
 
    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.acrusername }} 
        password: ${{ secrets.acrpassword }} 
        login-server: ${{ inputs.acrname }}.azurecr.io # default is https://index.docker.io/v1/

    - name: Build Docker Image
      env: 
        SQLUSER: ${{ steps.getSecretAction.outputs.SQLUSER }} 
        SQLPASSWORD: ${{ steps.getSecretAction.outputs.SQLPASSWORD }} 
        SQLSERVER: ${{ steps.getSecretAction.outputs.SQLSERVER }} 
        SQLDBNAME: ${{ steps.getSecretAction.outputs.SQLDBNAME }} 
      run: |
          cd ${{ inputs.filepath }}
          echo $PWD
          ls -a
          docker build . -t "${{ inputs.acrname }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}" -e 

    - name: Push Docker Image
      run: |
          docker push "${{ inputs.acrname }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}""

    # - name: Azure ACR build image CLI Action
    #   uses: Azure/cli@1.0.4
    #   with:
    #     # <Azure Container Registry URI>/<ACR_repository_name>:<Revision Number> where the ACR_repository_name follows the naming convention devopsoh/<image_name>:<tag>.
    #     inlineScript: |
    #       cd ${{ inputs.filepath }}
    #       echo $PWD
    #       ls -a
    #       az acr build --image "${{ env.IMAGE_NAME }}:${{ github.sha }}" --registry ${{ env.ACRNAME }}  .

    - name: Azure WebApp Deploy
      uses: Azure/webapps-deploy@v2
      with:
        # Name of the Azure Web App1
        app-name: ${{ inputs.webappname }}
        # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
        #publish-profile: # optional
        # Enter an existing Slot other than the Production slot
        slot-name: ${{ inputs.slotname }} # optional, default is production
        # Applies to Web App only: Path to package or folder. *.zip, *.war, *.jar or a folder to deploy
        #package: # optional, default is .
        # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
        images: ${{ env.ACRNAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        # Applies to Web App Containers only: Path of the Docker-Compose file. Should be a fully qualified path or relative to the default working directory. Required for multi-container scenario
        #configuration-file: # optional
        # Enter the start up command. For ex. dotnet run or dotnet run
        #startup-command: # optional

